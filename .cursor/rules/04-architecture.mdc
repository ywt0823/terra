---
description: 
globs: 
alwaysApply: true
---
# Terra Framework 架构设计

本规则文档描述 Terra Framework 的整体架构设计和模块间关系。

## 架构分层

Terra Framework 遵循清晰的分层架构设计，主要分为以下几层：

1. **基础设施层** - [terra-bedrock](mdc:terra-bedrock/pom.xml)
   提供异常处理、安全框架、事件机制等基础设施支持

2. **数据访问层** - [terra-strata](mdc:terra-strata/pom.xml)
   提供 ORM 支持、事务管理、查询增强等数据访问功能

3. **缓存层** - [terra-geyser](mdc:terra-geyser/pom.xml)
   提供多级缓存、缓存同步等高性能缓存解决方案

4. **核心业务层** - [terra-crust](mdc:terra-crust/pom.xml)
   提供领域模型、业务规则和状态机等企业级应用核心功能

5. **LLM 集成层** - [terra-nova](mdc:terra-nova/pom.xml)
   提供 LLM 模型管理、混合调用和增强服务

6. **流处理层** - [terra-stream](mdc:terra-stream/pom.xml)
   提供消息队列集成、事件驱动架构和流式数据处理功能

7. **工具层** - [terra-sediment](mdc:terra-sediment/pom.xml)
   提供各种通用工具类和助手函数

8. **集成层** - [terra-spring-boot-starter](mdc:terra-spring-boot-starter/pom.xml)
   提供 Spring Boot 自动配置和便捷集成能力

## 模块依赖关系

```
terra-dependencies (BOM)
        ^
        |
terra-sediment (工具)
        ^
        |
terra-bedrock (基础设施)
        ^
       / \
      /   \
     /     \
    /       \
terra-strata  terra-geyser
(数据访问)    (缓存)
    ^          ^
    |          |
    |          |
terra-crust (核心业务)
        ^
        |
terra-nova (LLM集成)  terra-stream (流处理)
        ^                  ^
        |                  |
        |                  |
terra-spring-boot-starter (集成)
```

## 设计原则

1. **关注点分离**：各模块职责单一，边界清晰
2. **依赖倒置**：高层模块不应依赖低层模块，二者应依赖抽象
3. **开闭原则**：对扩展开放，对修改关闭
4. **最小知识原则**：模块间知道彼此的最少信息
